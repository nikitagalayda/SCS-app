{"version":3,"sources":["logo.svg","Web3Client.js","components/CompanyCard.js","components/CompanyList.js","components/FounderInput.js","components/NewCompanyInput.js","components/NewCompanyInterface.js","components/ContractInteractionInterface.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","selectedAccount","SCSContract","CompanyContract","web3","provider","contractInitialized","init","a","window","ethereum","request","method","then","accounts","console","log","catch","err","on","Web3","eth","net","getId","networkID","Contract","SCSContractBuild","abi","networks","address","retrieveCompanies","methods","getCompanies","call","from","retrieveCompanyShares","contractAddress","CompanyContractBuild","getNumShares","addNewCompany","name","founders","init_shares","addCompany","send","mintShares","amount","burnShares","reissueShares","newAmount","sendShares","to","transferShares","CompanyCard","companyInfo","useState","shares","setShares","openSeaLink","companyShares","tx","Card","width","sx","minWidth","CardContent","Typography","xs","fontSize","component","Box","fontWeight","display","map","index","Link","rel","target","href","CompanyList","companyList","style","maxHeight","overflow","List","_","ListItem","FounderInput","id","addNewFounder","removeFounder","Grid","container","direction","justifyContent","alignItems","item","flex","TextField","fullWidth","label","variant","onChange","e","value","IconButton","onClick","NewCompanyInput","numFounders","setNumFounders","newCompanyInfo","setNewCompanyInfo","changeHandler","newFounders","rowSpacing","Array","key","Alert","React","forwardRef","props","ref","elevation","NewCompanyInterface","setSnackbarSeverity","open","setOpen","handleClose","event","reason","columnSpacing","marginTop","Math","max","Snackbar","autoHideDuration","onClose","severity","Button","founderAddresses","push","addNew","ContractInteractionInterface","amountShares","interactionInfo","setInteractionInfo","snackbarMessage","setSnackbarMessage","newInfo","spacing","height","App","companies","setCompanies","className","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34ba6175.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import Web3 from \"web3\";\r\n\r\nimport SCSContractBuild from \"contracts/SCS.json\";\r\nimport CompanyContractBuild from \"contracts/CompanyContract.json\";\r\n\r\nlet selectedAccount;\r\nlet SCSContract;\r\nlet CompanyContract;\r\nlet contractInitialized = false;\r\nlet web3;\r\nlet provider;\r\n\r\nexport const init = async () => {\r\n  provider = window.ethereum;\r\n\r\n  if (typeof provider !== \"undefined\") {\r\n    // Metamask is installed\r\n\r\n    provider\r\n      .request({ method: \"eth_requestAccounts\" })\r\n      .then((accounts) => {\r\n        selectedAccount = accounts[0];\r\n        console.log(`Selected account: ${selectedAccount}`);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        return;\r\n      });\r\n\r\n    window.ethereum.on(\"accountsChanged\", function (accounts) {\r\n      selectedAccount = accounts[0];\r\n      console.log(`Selected account: ${selectedAccount}`);\r\n    });\r\n  }\r\n\r\n  web3 = new Web3(provider);\r\n  const networkID = await web3.eth.net.getId();\r\n\r\n  SCSContract = new web3.eth.Contract(\r\n    SCSContractBuild.abi,\r\n    SCSContractBuild.networks[networkID].address\r\n  );\r\n\r\n  contractInitialized = true;\r\n};\r\n\r\nexport const getNewSCSContractInstance = async () => {\r\n  web3 = new Web3(provider);\r\n  const networkID = await web3.eth.net.getId();\r\n\r\n  SCSContract = new web3.eth.Contract(\r\n    SCSContractBuild.abi,\r\n    SCSContractBuild.networks[networkID].address\r\n  );\r\n\r\n  return SCSContract;\r\n};\r\n\r\nexport const retrieveCompanies = async () => {\r\n  if (!contractInitialized) {\r\n    await init();\r\n  }\r\n  return SCSContract.methods.getCompanies().call({ from: selectedAccount });\r\n};\r\n\r\nexport const retrieveCompanyShares = async (contractAddress) => {\r\n  if (!contractInitialized) {\r\n    await init();\r\n  }\r\n\r\n  CompanyContract = new web3.eth.Contract(\r\n    CompanyContractBuild.abi,\r\n    contractAddress\r\n  );\r\n  return CompanyContract.methods.getNumShares().call({ from: selectedAccount });\r\n};\r\n\r\nexport const addNewCompany = async (name, founders, init_shares) => {\r\n  if (!contractInitialized) {\r\n    await init();\r\n  }\r\n  return SCSContract.methods\r\n    .addCompany(name, founders, init_shares)\r\n    .send({ from: selectedAccount });\r\n};\r\n\r\nexport const mintShares = async (contractAddress, amount) => {\r\n  if (!contractInitialized) {\r\n    await init();\r\n  }\r\n\r\n  CompanyContract = new web3.eth.Contract(\r\n    CompanyContractBuild.abi,\r\n    contractAddress\r\n  );\r\n  return CompanyContract.methods\r\n    .mintShares(amount)\r\n    .send({ from: selectedAccount });\r\n};\r\n\r\nexport const burnShares = async (contractAddress, amount) => {\r\n  if (!contractInitialized) {\r\n    await init();\r\n  }\r\n\r\n  CompanyContract = new web3.eth.Contract(\r\n    CompanyContractBuild.abi,\r\n    contractAddress\r\n  );\r\n  return CompanyContract.methods\r\n    .burnShares(amount)\r\n    .send({ from: selectedAccount });\r\n};\r\n\r\nexport const reissueShares = async (contractAddress, newAmount) => {\r\n  if (!contractInitialized) {\r\n    await init();\r\n  }\r\n\r\n  CompanyContract = new web3.eth.Contract(\r\n    CompanyContractBuild.abi,\r\n    contractAddress\r\n  );\r\n  return CompanyContract.methods\r\n    .reissueShares(newAmount)\r\n    .send({ from: selectedAccount });\r\n};\r\n\r\nexport const sendShares = async (contractAddress, amount, to) => {\r\n  if (!contractInitialized) {\r\n    await init();\r\n  }\r\n\r\n  CompanyContract = new web3.eth.Contract(\r\n    CompanyContractBuild.abi,\r\n    contractAddress\r\n  );\r\n  return CompanyContract.methods\r\n    .transferShares(to, amount)\r\n    .send({ from: selectedAccount });\r\n};\r\n\r\nexport { web3, SCSContract };\r\n// export { SCSContract, contractInitialized };\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Card from \"@mui/material/Card\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { Box } from \"@mui/system\";\r\nimport Link from \"@mui/material/Link\";\r\n\r\nimport { retrieveCompanyShares } from \"../Web3Client\";\r\n\r\nexport default function CompanyCard({ companyInfo }) {\r\n  const [shares, setShares] = useState(0);\r\n  const openSeaLink = `http://testnets.opensea.io/${companyInfo[3]}`;\r\n\r\n  const retrieveShares = () => {\r\n    retrieveCompanyShares(companyInfo[3])\r\n      .then((tx) => {\r\n        setShares(tx);\r\n        console.log(tx);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  let companyShares = retrieveShares();\r\n  console.log(companyShares);\r\n\r\n  return (\r\n    <Card width=\"100%\" sx={{ minWidth: 275 }}>\r\n      <CardContent>\r\n        <Typography xs={2} sx={{ fontSize: 14 }} component=\"div\">\r\n          <Box fontWeight=\"bold\" display=\"inline\">\r\n            Name:\r\n          </Box>\r\n          {companyInfo[0]}\r\n        </Typography>\r\n        <Typography\r\n          xs={2}\r\n          sx={{ fontSize: 14, fontWeight: \"bold\" }}\r\n          component=\"div\"\r\n        >\r\n          Founders:\r\n        </Typography>\r\n        {companyInfo[1].map((address, index) => (\r\n          <Typography xs={2} sx={{ fontSize: 14 }} component=\"div\">\r\n            {address}\r\n          </Typography>\r\n        ))}\r\n        <Typography xs={2} sx={{ fontSize: 14 }} component=\"div\">\r\n          <Box fontWeight=\"bold\" display=\"inline\">\r\n            Shares:\r\n          </Box>\r\n          {shares}\r\n          {/* {companyInfo[2]} */}\r\n        </Typography>\r\n        <Typography xs={2} sx={{ fontSize: 14 }} component=\"div\">\r\n          <Box fontWeight=\"bold\" display=\"inline\">\r\n            Contract Address:\r\n          </Box>\r\n          <Typography xs={2} sx={{ fontSize: 14 }} component=\"div\">\r\n            {companyInfo[3]}\r\n          </Typography>\r\n        </Typography>\r\n        <Link rel=\"noopener noreferrer\" target=\"_blank\" href={openSeaLink}>\r\n          OpenSea\r\n        </Link>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport Grid from \"@mui/material/Grid\";\r\nimport CompanyCard from \"./CompanyCard\";\r\nimport { List, ListItem, Paper } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nexport default function CompanyList({ companyList }) {\r\n  return (\r\n    <Box style={{ maxHeight: \"300px\", overflow: \"auto\" }}>\r\n      <List>\r\n        {companyList.map((_, index) => (\r\n          <ListItem>\r\n            <CompanyCard companyInfo={companyList[index]}></CompanyCard>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Box>\r\n    // <Grid\r\n    //   container\r\n    //   // xs={8}\r\n    //   // sm={8}\r\n    //   // md={8}\r\n    //   direction=\"row\"\r\n    //   spacing={2}\r\n    //   // justifyContent=\"center\"\r\n    //   // alignItems=\"center\"\r\n    // >\r\n    // {companyList.map((_, index) => (\r\n    //   <Grid item key={index}>\r\n    //     <CompanyCard companyInfo={companyList[index]}></CompanyCard>\r\n    //   </Grid>\r\n    // ))}\r\n    // </Grid>\r\n  );\r\n}\r\n","import { Button, Grid, IconButton } from \"@mui/material\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\n\r\nexport default function FounderInput({ id, addNewFounder, removeFounder }) {\r\n  const [founderAddress, setFounderAddress] = useState(\"\");\r\n\r\n  const changeHandler = (e) => {\r\n    // console.log(e.target.value);\r\n    addNewFounder(id, e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      justifyContent=\"flex-start\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Grid item flex={1}>\r\n        <TextField\r\n          fullWidth\r\n          id=\"outlined-basic\"\r\n          label=\"Founder\"\r\n          variant=\"outlined\"\r\n          name=\"founders\"\r\n          onChange={changeHandler}\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <IconButton variant=\"contained\" onClick={() => removeFounder(id)}>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { Button, IconButton } from \"@mui/material\";\r\nimport FounderInput from \"./FounderInput\";\r\n\r\nexport default function NewCompanyInput({\r\n  numFounders,\r\n  setNumFounders,\r\n  newCompanyInfo,\r\n  setNewCompanyInfo,\r\n}) {\r\n  // const [numFounders, setNumFounders] = useState(1);\r\n\r\n  const changeHandler = (e) => {\r\n    if (e.target.name == \"founders\") {\r\n      // setNewCompanyInfo({\r\n      //   ...newCompanyInfo,\r\n      //   founders: [...newCompanyInfo.founders, e.target.value],\r\n      // });\r\n    } else {\r\n      setNewCompanyInfo({ ...newCompanyInfo, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n\r\n  const addNewFounder = (id, address) => {\r\n    var newFounders = { ...newCompanyInfo.founders };\r\n    newFounders[id] = address;\r\n\r\n    console.log(newFounders);\r\n\r\n    setNewCompanyInfo({\r\n      ...newCompanyInfo,\r\n      founders: newFounders,\r\n    });\r\n  };\r\n\r\n  const removeFounder = (id) => {\r\n    if (numFounders > 1) {\r\n      var newFounders = newCompanyInfo.founders;\r\n      delete newFounders[id];\r\n      console.log(newFounders);\r\n\r\n      setNewCompanyInfo({\r\n        ...newCompanyInfo,\r\n        founders: newFounders,\r\n      });\r\n\r\n      setNumFounders(numFounders - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      width=\"100%\"\r\n      container\r\n      direction=\"column\"\r\n      // justifyContent=\"start\"\r\n      // alignItems=\"center\"\r\n      rowSpacing={2}\r\n    >\r\n      <Grid item width=\"100%\">\r\n        <TextField\r\n          fullWidth\r\n          id=\"outlined-basic\"\r\n          label=\"Name\"\r\n          variant=\"outlined\"\r\n          name=\"name\"\r\n          onChange={changeHandler}\r\n        />\r\n      </Grid>\r\n      <Grid item width=\"100%\">\r\n        {/* <Grid item flex={1}>\r\n              <IconButton\r\n                onClick={() => setNumFounders(Math.max(1, numFounders + 1))}\r\n              >\r\n                <AddIcon />\r\n              </IconButton>\r\n            </Grid> */}\r\n        <Grid item>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            // alignItems=\"center\"\r\n            rowSpacing={2}\r\n          >\r\n            {Array.from(Array(numFounders)).map((_, index) => (\r\n              <Grid item width=\"100%\">\r\n                <FounderInput\r\n                  id={index}\r\n                  addNewFounder={addNewFounder}\r\n                  removeFounder={removeFounder}\r\n                  key={index}\r\n                ></FounderInput>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      {/* <Grid item xs={2} sm={4} md={4}>\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Founders\"\r\n            variant=\"outlined\"\r\n            name=\"founders\"\r\n            onChange={changeHandler}\r\n          />\r\n        </Grid> */}\r\n\r\n      {/* <Button\r\n          variant=\"contained\"\r\n          onClick={() => setNumFounders(numFounders - 1)}\r\n        >\r\n          Remove a founder\r\n        </Button> */}\r\n      <Grid item width=\"100%\">\r\n        <TextField\r\n          fullWidth\r\n          id=\"outlined-basic\"\r\n          label=\"Shares\"\r\n          variant=\"outlined\"\r\n          name=\"shares\"\r\n          onChange={changeHandler}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport MuiAlert from \"@mui/material/Alert\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport SCSContractBuild from \"contracts/SCS.json\";\r\n\r\nimport {\r\n  retrieveCompanies,\r\n  addNewCompany,\r\n  init,\r\n  getNewSCSContractInstance,\r\n  SCSContract,\r\n  // contractInitialized,\r\n} from \"../Web3Client\";\r\nimport NewCompanyInput from \"./NewCompanyInput\";\r\nimport { Grid, IconButton } from \"@mui/material\";\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n// var abi = SCSContractBuild.abi;\r\n// var SCSContract = web3.eth.contract(abi);\r\n// var ScsContract = SCSContract.at(0x5ec5c4537e1f5c30e5d2dc36d8296e1943a33080);\r\n// let SCSContract = getNewSCSContractInstance();\r\n// console.log(SCSContract.abi);\r\n// SCSContract.events.CompanyCreated().on(\"connected\", function (subscriptionId) {\r\n//   console.log(subscriptionId);\r\n// });\r\n\r\n// event.watch(function (error, result) {\r\n//   // result will contain various information\r\n//   // including the argumets given to the `Deposit`\r\n//   // call.\r\n//   if (!error) console.log(result);\r\n// });\r\n\r\nexport default function NewCompanyInterface() {\r\n  const [newCompanyInfo, setNewCompanyInfo] = useState({\r\n    name: \"\",\r\n    founders: {},\r\n    shares: 0,\r\n  });\r\n\r\n  const [snackbarSeverity, setSnackbarSeverity] = useState(\"success\");\r\n  const [open, setOpen] = React.useState(false);\r\n  const [numFounders, setNumFounders] = useState(1);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const addNew = (name, founders, shares) => {\r\n    console.log(\"ADDING NEW COMPANY\");\r\n    console.log(name);\r\n    console.log(shares);\r\n\r\n    let founderAddresses = [];\r\n\r\n    for (const address in founders) {\r\n      founderAddresses.push(founders[address]);\r\n    }\r\n\r\n    addNewCompany(name, founderAddresses, shares)\r\n      .then((tx) => {\r\n        console.log(tx);\r\n        setOpen(tx[\"status\"]);\r\n        setSnackbarSeverity(\"success\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setOpen(true);\r\n        setSnackbarSeverity(\"error\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      width=\"100%\"\r\n      container\r\n      direction=\"row\"\r\n      justifyContent=\"center\"\r\n      columnSpacing={2}\r\n      // alignItems=\"center\"\r\n    >\r\n      <Grid item marginTop={10}>\r\n        <IconButton\r\n          onClick={() => setNumFounders(Math.max(1, numFounders + 1))}\r\n        >\r\n          <AddIcon />\r\n        </IconButton>\r\n      </Grid>\r\n\r\n      <Grid\r\n        width=\"65%\"\r\n        item\r\n        // height=\"100%\"\r\n        container\r\n        direction=\"column\"\r\n        // justifyContent=\"flex-start\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n          <Alert\r\n            onClose={handleClose}\r\n            severity=\"success\"\r\n            sx={{ width: \"100%\" }}\r\n          >\r\n            Added a new company\r\n          </Alert>\r\n        </Snackbar>\r\n        <Grid item width=\"100%\">\r\n          <NewCompanyInput\r\n            numFounders={numFounders}\r\n            setNumFounders={setNumFounders}\r\n            newCompanyInfo={newCompanyInfo}\r\n            setNewCompanyInfo={setNewCompanyInfo}\r\n          ></NewCompanyInput>\r\n        </Grid>\r\n        <Grid item marginTop={2}>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              addNew(\r\n                newCompanyInfo.name,\r\n                newCompanyInfo.founders,\r\n                newCompanyInfo.shares\r\n              );\r\n            }}\r\n          >\r\n            ADD COMPANY\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Grid from \"@mui/material/Grid\";\r\nimport CompanyCard from \"./CompanyCard\";\r\nimport { Button, List, ListItem, Paper, TextField } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport MuiAlert from \"@mui/material/Alert\";\r\n\r\nimport {\r\n  mintShares,\r\n  burnShares,\r\n  reissueShares,\r\n  sendShares,\r\n} from \"../Web3Client\";\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function ContractInteractionInterface() {\r\n  const [interactionInfo, setInteractionInfo] = useState({\r\n    contractAddress: \"\",\r\n    amountShares: 0,\r\n    to: \"\",\r\n  });\r\n\r\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\r\n  const [snackbarSeverity, setSnackbarSeverity] = useState(\"success\");\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const changeHandler = (e) => {\r\n    var newInfo = { ...interactionInfo };\r\n    newInfo[e.target.name] = e.target.value;\r\n\r\n    console.log(newInfo);\r\n\r\n    setInteractionInfo(newInfo);\r\n  };\r\n\r\n  const mint = () => {\r\n    console.log(interactionInfo);\r\n    mintShares(interactionInfo.contractAddress, interactionInfo.amountShares)\r\n      .then((tx) => {\r\n        setOpen(true);\r\n        setSnackbarMessage(\"Mint successful\");\r\n        setSnackbarSeverity(\"success\");\r\n        console.log(tx);\r\n      })\r\n      .catch((err) => {\r\n        setOpen(true);\r\n        setSnackbarMessage(\"Mint unsuccessful\");\r\n        setSnackbarSeverity(\"error\");\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const burn = () => {\r\n    console.log(interactionInfo);\r\n    burnShares(interactionInfo.contractAddress, interactionInfo.amountShares)\r\n      .then((tx) => {\r\n        setOpen(true);\r\n        setSnackbarMessage(\"Burn successful\");\r\n        setSnackbarSeverity(\"success\");\r\n        console.log(tx);\r\n      })\r\n      .catch((err) => {\r\n        setOpen(true);\r\n        setSnackbarMessage(\"Burn unsuccessful\");\r\n        setSnackbarSeverity(\"error\");\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const reissue = () => {\r\n    console.log(interactionInfo);\r\n    reissueShares(interactionInfo.contractAddress, interactionInfo.amountShares)\r\n      .then((tx) => {\r\n        setOpen(true);\r\n        setSnackbarMessage(\"Reissue successful\");\r\n        setSnackbarSeverity(\"success\");\r\n        console.log(tx);\r\n      })\r\n      .catch((err) => {\r\n        setOpen(true);\r\n        setSnackbarMessage(\"Reissue unsuccessful\");\r\n        setSnackbarSeverity(\"error\");\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const send = () => {\r\n    console.log(interactionInfo);\r\n    sendShares(\r\n      interactionInfo.contractAddress,\r\n      interactionInfo.amountShares,\r\n      interactionInfo.to\r\n    )\r\n      .then((tx) => {\r\n        setOpen(true);\r\n        setSnackbarMessage(\"Transfer successful\");\r\n        setSnackbarSeverity(\"success\");\r\n        console.log(tx);\r\n      })\r\n      .catch((err) => {\r\n        setOpen(true);\r\n        setSnackbarMessage(\"Transfer unsuccessful\");\r\n        setSnackbarSeverity(\"error\");\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      rowSpacing={2}\r\n    >\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\" sx={{ width: \"100%\" }}>\r\n          {snackbarMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n      {/* <h2>Your address</h2>\r\n        <Grid item>\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Address\"\r\n            variant=\"outlined\"\r\n            name=\"address\"\r\n            onChange={changeHandler}\r\n          /> */}\r\n      {/* </Grid> */}\r\n      {/* <h2>Contract address</h2> */}\r\n      <Grid item width=\"60%\">\r\n        <TextField\r\n          fullWidth\r\n          id=\"outlined-basic\"\r\n          label=\"Contract address\"\r\n          variant=\"outlined\"\r\n          name=\"contractAddress\"\r\n          onChange={changeHandler}\r\n        />\r\n      </Grid>\r\n      {/* <h2>Number of shares</h2> */}\r\n      <Grid item width=\"60%\">\r\n        <TextField\r\n          fullWidth\r\n          id=\"outlined-basic\"\r\n          label=\"Shares\"\r\n          variant=\"outlined\"\r\n          name=\"amountShares\"\r\n          onChange={changeHandler}\r\n        />\r\n      </Grid>\r\n      <Grid item width=\"60%\">\r\n        <TextField\r\n          fullWidth\r\n          id=\"outlined-basic\"\r\n          label=\"Receiver address (Only for Send)\"\r\n          variant=\"outlined\"\r\n          name=\"to\"\r\n          onChange={changeHandler}\r\n        />\r\n      </Grid>\r\n      <Grid item width=\"100%\">\r\n        <Grid>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            rowSpacing={1}\r\n          >\r\n            <Grid item width=\"60%\">\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                spacing={1}\r\n                // justifyContent=\"center\"\r\n                // alignItems=\"center\"\r\n              >\r\n                <Grid item flex={1}>\r\n                  <Button\r\n                    style={{ width: \"100%\", height: \"100%\" }}\r\n                    variant=\"contained\"\r\n                    onClick={() => mint()}\r\n                  >\r\n                    Mint\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item flex={1}>\r\n                  <Button\r\n                    style={{ width: \"100%\", height: \"100%\" }}\r\n                    variant=\"contained\"\r\n                    onClick={() => burn()}\r\n                  >\r\n                    Burn\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item width=\"60%\">\r\n              <Grid container direction=\"row\" spacing={1}>\r\n                <Grid item flex={1}>\r\n                  <Button\r\n                    style={{ width: \"100%\", height: \"100%\" }}\r\n                    variant=\"contained\"\r\n                    onClick={() => reissue()}\r\n                  >\r\n                    Reissue\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item flex={1}>\r\n                  <Button\r\n                    style={{ width: \"100%\", height: \"100%\" }}\r\n                    variant=\"contained\"\r\n                    onClick={() => send()}\r\n                  >\r\n                    Send\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Button from \"@mui/material/Button\";\n\nimport CompanyList from \"./components/CompanyList\";\nimport NewCompanyInterface from \"./components/NewCompanyInterface\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\n\nimport { retrieveCompanies, addNewCompany, init } from \"./Web3Client\";\nimport { Box } from \"@mui/system\";\nimport { Grid } from \"@mui/material\";\nimport ContractInteractionInterface from \"./components/ContractInteractionInterface\";\n\nfunction App() {\n  // const providerUrl = process.env.REACT_APP_PROVIDER_URL;\n\n  const [companies, setCompanies] = useState([]);\n\n  const retrieve = () => {\n    retrieveCompanies()\n      .then((tx) => {\n        setCompanies(tx);\n        console.log(tx);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const add = (name, founders, shares) => {\n    addNewCompany()\n      .then((tx) => {\n        console.log(tx);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const mint = (address, contractAddress, shares) => {};\n\n  return (\n    <div className=\"App\">\n      {/* <Grid container direction=\"column\" alignContent=\"center\"> */}\n      <Box width=\"100vw\" height=\"70vh\" marginTop=\"10%\">\n        <Grid\n          height=\"100%\"\n          container\n          direction=\"row\"\n          // justifyContent=\"center\"\n          alignItems=\"flex-start\"\n        >\n          <Grid\n            item\n            width=\"33%\"\n            // height=\"100%\"\n            container\n            direction=\"column\"\n            justifyContent=\"flex-start\"\n            alignItems=\"center\"\n          >\n            <Grid item flex={1}>\n              <h1>GET COMPANIES</h1>\n            </Grid>\n            <Grid item flex={9}>\n              <Button variant=\"contained\" onClick={() => retrieve()}>\n                {\" \"}\n                GET COMPANIES{\" \"}\n              </Button>\n            </Grid>\n            {/* <Box style={{ maxHeight: \"100px\", overflow: \"auto\" }}> */}\n            {companies.length > 0 ? (\n              <CompanyList companyList={companies}></CompanyList>\n            ) : (\n              <div></div>\n              // <h1>No companies</h1>\n            )}\n            {/* </Box> */}\n          </Grid>\n          <Grid\n            item\n            width=\"33%\"\n            height=\"100%\"\n            container\n            direction=\"column\"\n            justifyContent=\"flex-start\"\n            alignItems=\"center\"\n            // border={1}\n          >\n            <Grid item>\n              <h1>ADD A COMPANY</h1>\n            </Grid>\n            <Grid item width=\"100%\">\n              <NewCompanyInterface></NewCompanyInterface>\n            </Grid>\n          </Grid>\n          <Grid item width=\"33%\">\n            <Grid container direction=\"column\" alignItems=\"center\">\n              <h1>INTERACT</h1>\n              <ContractInteractionInterface></ContractInteractionInterface>\n            </Grid>\n          </Grid>\n\n          {/* <Button variant=\"contained\" onClick={() => add()}>\n        ADD TEST COMPANY\n      </Button> */}\n\n          {/* <NewCompanyInput></NewCompanyInput> */}\n        </Grid>\n      </Box>\n      {/* </Grid> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}